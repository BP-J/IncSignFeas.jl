#-----------------------------------------------------------------------
#-----------------------------------------------------------------------
# Version 0.1, 2025.
#
# If you found this piece of software useful, please cite the paper:
# J.-P. Dussault, J.Ch. Gilbert, B. Plaquevent-Jourdain,
# Primal and Dual Approaches for the Chamber Enumeration
# of real hyperplane arrangements, 2025.
#
# Authors:
# - Jean-Pierre Dussault (Univ. of Sherbrooke, Canada),
# - Jean Charles Gilbert (INRIA, France),
# - Baptiste Plaquevent-Jourdain (INRIA & Univ. of Sherbrooke, Canada).
#
# Copyright 2025, INRIA (France) and Univ. of Sherbrooke (Canada).
#
# ISF is distributed under the terms of the Q Public License version
# 1.0.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the Q Public
# License version 1.0 for more details.
#
# You should have received a copy of the Q Public License version 1.0
# along with this program. If not, see
# <https://doc.qt.io/archives/3.3/license.html>.
#
#-----------------------------------------------------------------------
#-----------------------------------------------------------------------

### file used to generate the tested instances (for convenience, easier than having the data in .txt files)
### names start with gen for generate/generation


## 2d instances
function gen_2d_4(zer0 :: Bool = false, T = Float64)

    Vt = T.([0	0	-1	5	-19	17	2	5	-1	7	5	12	5	-11	-1	-2	2	4	-16	-5
            0	0	3	-13	0	-17	-7	-2	-8	7	-11	-16	8	-3	13	-17	1	-8	-18	-10
            20	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            17	15	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            -8	9	-8	-13	1	10	-5	-12	-14	2	-8	0	-12	-15	-14	11	-20	-17	-2	10])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_2d_5(zer0 :: Bool = false, T = Float64)

    Vt = T.([0	0	0	4	4	-8	20	17	17	-13	1	17	-2	-7	3	-17	-18	-3	-3	-1
            0	0	0	6	-18	18	-17	-7	-12	19	-6	-4	-19	6	3	-5	14	11	20	-6
            18	-3	5	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            -16	-12	-16	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            6	18	3	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            -15	-6	-7	-12	11	-13	-18	18	2	-9	5	3	-14	2	-1	20	-12	12	2	-8])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_2d_6(zer0 :: Bool = false, T = Float64)

    Vt = T.([0	0	0	0	8	9	-16	-20	-3	0	14	-3	-6	9	-13	-15	-5	7	-20	8
            0	0	0	0	3	-1	2	-9	-3	-6	-2	0	-10	1	-6	-12	8	1	10	-5
            0	18	-5	-19	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            19	-11	4	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            -3	15	18	-8	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            10	-11	18	6	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            -3	-12	16	-18	12	-5	-18	0	-19	-10	-20	-4	1	8	-17	15	5	4	-17	-4])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_2d_7(zer0 :: Bool = false, T = Float64)

    Vt = T.([0	0	0	0	0	-11	-9	18	1	20	-1	-6	-16	16	-16	16	20	11	3	14
            0	0	0	0	0	-20	11	-8	13	6	8	12	-17	6	17	-19	-1	20	-15	1
            10	-20	15	20	-7	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            -8	-8	-16	-16	-17	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            6	-3	-18	3	-13	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            -8	-18	-15	12	-20	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            -2	-18	-7	10	-8	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            -4	-1	0	8	-2	11	19	14	9	-1	-19	-1	-4	11	15	15	7	10	-15	9])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_2d_8(zer0 :: Bool = false, T = Float64)

    Vt = T.([0	0	0	0	0	0	-9	17	13	15	-5	-5	-16	-5	-17	9	4	0	9	-14
            0	0	0	0	0	0	-7	9	9	-6	-12	-1	-17	7	-3	16	5	15	17	9
            -12	-9	-15	-1	-19	-12	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            9	12	-19	20	-1	3	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            -3	10	5	-4	-9	2	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            -8	6	-2	11	20	-18	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            4	-13	10	-10	-16	-12	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            2	8	13	5	1	19	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            0	19	7	10	13	2	-8	14	-15	10	-17	19	0	8	-14	-7	-5	20	-18	-5])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

## rand instances 
function gen_rand_2_8(zer0 :: Bool = false, T = Float64)
    T = Float64
    Vt = T.([3.8683609857829806	2.2780995193846945	1.4607850143850676	2.988868058768702	4.111727274573429	-3.563420410857061	2.8961664025710165	4.2813339309872775
            -3.4872341195730905	2.3492278632761696	-0.5138496708238882	-0.9318924373338833	0.04164767445762774	3.87181144867605	4.185605378337285	2.5427182421172754
            4.419346482543752	4.021255114891574	-2.818374700154914	-0.0998243777737895	-2.3607247306146864	0.5549776216754343	2.8986042224858055	-2.881579828333357])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_rand_4_8(zer0 :: Bool = false, T = Float64)
    T = Float64
    Vt = T.([-0.10616470428427838	0.26249151429862505	3.5438952174448235	3.1488282950172475	2.7381354102451247	1.164625113863419	2.495772995004495	-1.8127173109214234
            -0.9824927422179175	3.4788740118119446	3.3935502141512597	1.2119044730905926	-4.264975166565134	-3.882247688488394	4.226238135829784	0.8646213611301778
            2.7769132551900078	3.5773437984576804	-4.731867281031356	-4.883004941681007	1.0107574061157443	2.3918628386231147	1.413708620081624	2.115281819685727
            -1.5434038141903117	4.159174008346867	3.976589700520937	-1.91901826160791	3.0859759280132826	-1.750792417443443	2.2303732077748073	0.6149813344409272
            0.5448045603129059	-2.087746122204579	2.9625635845573814	4.341561723550125	-1.805413405836922	2.527666614945583	3.610190381067242	3.162482434343805])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_rand_4_9(zer0 :: Bool = false, T = Float64)
    T = Float64
    Vt = T.([-1.3888880218033983	2.0432869368296913	-3.1463772084455544	3.3902025797912194	-2.018000255746885	4.0297425679522645	-4.455472963084134	0.9319234665655696	-3.876712334349637
            -2.442833882093498	0.44202750138688574	1.6879174585175594	1.3095470689261146	-1.9193662645334042	-0.32470840543186164	-1.148396306961763	4.792821375090307	-1.9091392543313146
            4.209487372388928	0.6609086827409472	2.2271763414126267	0.37869671075306477	-2.096526401322516	-3.8346735502353644	1.8582046527041984	-2.917466397290233	-2.621071874049518
            -1.9551755335519028	0.5450958620839186	3.455772224223227	0.12350703997452861	2.8990873728372177	-0.21734024720220235	4.976895633325682	-3.160851206386046	3.7338568413855864
            4.276672136483985	1.2181398384071396	-4.058955455151496	1.500531639940248	-2.3904747009151817	-1.0992039944715148	-4.269268930488911	0.6614731709465749	-2.625242818152124])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_rand_5_10(zer0 :: Bool = false, T = Float64)
    T = Float64
    Vt = T.([0.8087624102317714	-3.2104591077029534	-1.73326776479655	-1.4770202154194845	2.140165803950885	-4.429493971863247	-1.5397635404438514	3.4623013245678633	2.9136168559628697	3.379289814524129
            -1.4282649786592183	-2.6425770491862997	2.3909664424951504	0.7486091694000829	-1.6444430802249876	-4.580078752645042	2.320792009641907	4.239128503753987	-4.256781556332401	0.3691941129792742
            -2.748591883728384	3.978490064914996	-2.7050685500006177	-3.468214197826468	1.1884425477012428	4.985635512115315	-0.7880152796968887	0.1381982973513729	1.5312658051439398	2.7192668680131926
            1.1714119418037283	4.7317738723791685	0.6838773844785673	-0.6794722378669793	-4.877197202108672	3.9218666274311387	-2.615270568336979	2.825464824806926	2.431405435602384	-0.03408483960429143
            0.418086158361084	4.593743755882319	-1.2005728516859437	0.15080058593260448	3.6085234295243094	-0.39509836739423543	0.8958791903223229	1.5302653283127954	-3.418858349562781	0.8752492273590118
            3.1100962704706636	-4.55534343011856	-1.5891100424881166	2.526662978092923	2.886289027364337	-0.7167088145351486	1.0761130416202203	2.8227373852112994	-2.348152284468672	-3.1000529697285026])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_rand_4_11(zer0 :: Bool = false, T = Float64)
    T = Float64
    Vt = T.([-1.957660728470506	-4.158966392938441	2.633490858134966	-2.0371295849634583	4.947835372333794	3.1303809426276863	-2.6847505478757228	1.2244000637392116	-1.581831584592971	-4.13205685991292	-1.6602802830700614
            -2.43278379017267	0.5842131078620416	-0.08257739664041308	-2.0229713960861693	2.6509136269044964	-0.9437834881954466	-2.2095188985327785	2.2689460743507803	4.164921239027408	-2.003525168943062	-1.0392476932824013
            1.8915151761572213	3.8964710797831623	2.1531536900007175	-0.6974633601448177	1.1070637075895329	-3.4584469741891057	-0.747002914678524	4.643104184111422	-4.808492271793844	3.367835598434689	-4.655600546334014
            3.7932326831855856	2.5686711284013186	0.7566500518601527	-1.253389992913042	-0.6477855929720477	-1.2157666447053306	4.318395927739216	0.11204345580061337	-1.5880464462961996	4.049402408680146	-1.5147244906635005
            2.253499249709503	-4.032296660203794	-2.2856806599561974	-0.40924742792189495	1.91962682981333	-4.8994657150508765	-2.9977545905347727	4.543523872739432	-1.8074680968767431	2.3499970490850153	-1.8545880688079885])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_rand_6_12(zer0 :: Bool = false, T = Float64)
    T = Float64
    Vt = T.([-1.3396723627443485	0.26934028133556387	-3.2631474112314987	4.224262122322564	-3.4380215959786966	1.3010026147618936	3.136468901446067	-0.08842027187498158	0.4535617726729446	-2.2850065324854785	-0.2599002992656396	1.7125227780364571
            3.8325876527011724	4.75433301108196	4.782107540074126	-1.466771738128052	-1.8381401763525251	-2.699669140486618	-4.164308808989774	0.543340660668673	3.128722030179735	3.9866886693338657	-4.899982711167013	0.9233387060832954
            2.941018013375152	-1.1209038454271858	3.0737038186396415	-2.0916650419795904	3.214812965219168	-0.10314472435192013	4.449587106554162	4.011928155635202	-3.5332116039934105	3.1127460436179986	-1.7814494618784515	2.191484141917457
            -0.5766739614526184	1.2626810763010032	3.403732992516717	-0.6029776591042535	3.162793658318667	2.8933065675540304	-1.491470062367788	1.5092386823610349	-2.9011702577302168	2.2514537000169876	1.975307083970036	3.945817737578997
            -3.8874522970324286	-1.4880628084570657	1.2075155413143068	-3.1844890086251443	-3.544923678521583	2.4516476608327133	1.411983605340803	-4.2440737264217	0.8851403351673781	1.5846737364749408	-1.7962985276066723	0.1980979161857499
            -1.3017167836389876	2.5482143269018986	4.5083439416797955	2.9246083665373455	3.179313322042807	-4.198135432955973	1.844047649651246	-3.1801864637041133	-1.9101816339772015	2.9312739912163286	4.830706824204229	2.4855922809609767
            3.0510653591901296	-1.990364889582129	1.5014142665266828	0.5917766970261729	4.279467956325748	-4.458939243884071	3.8349600331876244	0.5863690874027883	3.6523008832088086	2.449173913328919	0.5952651484811966	-0.2730966766839604])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_rand_5_13(zer0 :: Bool = false, T = Float64)
    T = Float64
    Vt = T.([-0.6528860039753004	2.2607388584095345	-1.6622071688657014	0.4841355069037445	-3.395530140894855	-2.424220216992116	-0.30722643946300754	-4.0837188273975125	4.535671926987791	-1.663564818728095	0.7997630852424276	1.2806346773019783	-3.464908149768485
            1.818207415936517	-3.574153132259108	3.6864581245822716	1.6227509361411707	-4.2655939634825355	-4.295001588221351	-2.146322739823192	-2.887405916117971	-1.0369173683568045	-2.0741234558628507	-0.7159330242126749	1.3787718208632949	1.8840442227493592
            -0.521274956197969	-0.16910018112682668	-4.561398109921086	0.19272058454725682	-4.700584793390742	-2.5722050556520037	3.622765759507318	3.0978716756619953	-3.9705008199352743	3.457465294812626	-1.6634448851472816	-2.4862997754813696	3.2376197049482505
            2.2147954963784464	2.8364051043134575	-0.9652375912287925	1.9175995815489666	4.344951095624742	-4.6052302518350405	0.4954072281927002	-4.107452065204601	3.850224966813692	-2.565462202661469	-2.9367280175659194	4.866800903046709	1.665108985856818
            -4.693172134428105	-0.2133828580277597	-2.218649694612489	-4.73765341421399	-4.512718474792843	-3.6262860768892713	-1.229220092859068	0.5906114803792939	0.5391386681894661	-2.512760277381422	-0.6568705315049772	4.7568415562582125	4.0675853495436165
            -0.21968916287953277	3.2123266855499755	3.21014163843253	2.552724543733591	0.38958085755953387	-0.9614854364233139	-1.0987898831941778	1.6064381396116467	-4.6284792824232825	-1.622019178464641	4.369765142874428	-2.070267654734419	-4.731009520282595])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_rand_7_14(zer0 :: Bool = false, T = Float64)
    T = Float64
    Vt = T.([-2.4886799636969448	0.7655090138523823	1.3553369474312205	0.5465759539134252	-0.22147087751083872	0.2964029774024779	1.9480714344347305	-1.5131266814342037	0.6793116854956649	3.3040471744205426	0.4981803513241312	-3.951656213644701	4.230761651137059	-1.2134320230718498
            2.2388520614710474	0.0055076328126602014	-1.2232868334578562	-3.1638346148089544	-0.8072432514196348	-0.8215821439784787	2.4073108330725423	2.55971398885086	2.567635266518943	-1.0715103760298783	-3.8944994040962113	3.2668825152732617	4.559191543903287	-1.7062837115160523
            -3.930466650166239	2.5873588485598153	1.9742807989313027	4.769180305767628	-1.1822444340592664	-4.913857373243089	4.622695644658194	-0.5828623449718107	-3.8933488450299247	-3.345415239590095	3.21267155304095	-2.7500673583870405	-0.44572221823482083	-1.1348407104375924
            -2.3582296781728926	0.4463776632526928	-0.7827382586237575	-3.8146957931130787	2.987008161088741	-1.2896245134780016	2.24178406352343	-0.3478427496855052	3.6534610444282145	3.02724760538978	4.48863643031398	-2.441666608529008	-1.7341875495156056	0.2375575493034643
            1.7347706323762724	-4.295070395687897	-2.9039348734524717	0.7784638851299364	-1.3999781111304799	2.123304613776029	-3.025659749347114	-2.882662490633093	0.19977949611916124	-0.04311051473569805	-4.575931222767846	-4.8238892026985205	-1.0170712267110082	3.2956986281027687
            -3.7660455146199423	-4.797071613505203	3.9726755508304534	2.7008656199715473	-3.379795911126151	4.050670729625367	-4.811585610348099	-2.6674936828415294	-1.682505848613609	0.43549535006529694	-0.03237369214634023	1.9108955846485065	2.904297472603644	-0.5389084050637927
            -4.894171838978583	0.610761195268843	-1.2799177718953147	3.172574949109581	-1.6582872934736481	0.6957358978542516	-1.3036310521696792	-0.07180882373180708	-1.8955231914187265	-3.390851501778199	3.791484764319267	-1.5948296835152664	4.5660570224814645	-4.7522840324785145
            2.377273827615741	-3.939964505354756	-0.45398591653720954	-3.9617933571924038	4.340992599728728	3.78824562971793	3.7712297894778612	4.940804702786206	-0.41644311065640927	-3.0957620266091257	-4.000645951175664	-1.9103478437905552	-0.015008597082029063	-3.093205427918951])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_rand_7_15(zer0 :: Bool = false, T = Float64)
    T = Float64
    Vt = T.([3.778200252715803	-4.066491436527442	-0.6778374355037986	4.132663281258089	-4.130599324397663	-1.1094866156157934	-0.6648378310443059	4.534460303303453	2.41073297003875	-0.25097686442829614	0.6705889316658442	-2.631631956024847	-1.668420556405723	-0.6043959562973589	4.658576119387378
            1.751785967442805	4.364958761478443	-4.414260091660745	-4.221617262176318	4.568497460794142	4.866022978535678	-3.3704712235087833	0.9521455106871279	-3.2861484944672603	2.4678667936549035	-0.3506395392607131	-1.8963652233972117	-1.4850400166120825	3.221150556610967	1.2891350035679272
            -4.417271681425366	3.4379172619452825	1.7024911013740285	2.9108748551241934	-1.7479949352132673	0.5405151223049276	-3.254299081408462	-2.170944401641164	0.6698009421943762	0.02359084464461314	1.51844386439982	-1.859910539959051	4.004587524420408	-1.180186910333162	2.97114757494065
            4.280111433833139	2.685740997146908	0.33357919605726427	-2.6239120229825774	0.808504071590852	1.5328068560408137	-1.5398262050329714	0.9534289293430198	-3.6946637805453566	-4.486915354288169	3.7687498188527235	4.8697551179701035	2.9025536403930676	-1.6008040135786228	2.796250744628016
            -4.975562853842526	2.4714982537904073	-2.6292431722089304	1.0163750949435824	3.815850493338097	-1.1328381687524258	2.5263376502224553	2.61566917158796	-2.681458396467935	-2.5844943200794193	4.94938742210925	-4.3824994491511475	0.6999959057093874	0.24280176632357375	1.3880018703925212
            2.9407393720458783	0.23020978939322312	0.785716563411778	-0.23416474215600447	1.6110771445562322	-0.7129219161820721	1.541820785228074	1.0241683750189323	-0.8029501606946232	0.017663792246594978	4.509226633814682	-0.5507706410419444	1.596977238447358	-0.2594377065378606	1.2678978108451644
            -4.863381950843647	-4.459502475411607	0.9477078161368713	4.813479047650256	4.213970115207943	0.6190398689124255	-4.598790014733359	4.804208997210681	1.0948911036730347	-0.8246462672720223	-3.2810379175218953	-0.6723900422824769	3.014410109004282	-1.8408567356943117	-0.22405811848105084
            -0.02323015798083805	2.4005347176957237	-2.591733858819093	-4.622151799448214	-4.716319276773568	4.5537686770563965	-2.479218913338199	4.918259786547818	-4.731962766750818	-4.62127122169973	4.151061932113823	2.6957612862603177	-2.941718927864325	-4.782505590608492	-3.121172160253387])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_rand_8_16(zer0 :: Bool = false, T = Float64)
    T = Float64
    Vt = T.([0.003602303433102305	1.7058637719325132	-0.2980427165204358	-2.0505511631873476	1.079355499829262	0.7597728530643189	-1.771667862306997	1.279311297303909	3.1072433018212733	-1.4243109106231555	-2.9182689700676923	-3.409373525160194	4.9087821718019695	-4.314655534989709	-2.537706050212635	2.4622098682769056
            0.6996196918599851	2.824952852381173	4.420202047067729	-3.1097475022029797	2.689603996369232	1.297301264184213	-4.773737008467181	1.737086816114466	4.152307833572251	1.083984736417798	3.179880859628519	3.6845741461336	-1.1105170524451768	-2.5009298460946408	-3.5574743320338023	0.6467789426647774
            4.505115441607637	0.4853663466272551	-0.5239052395219712	-0.5563793490348845	-1.404863296907558	-3.2795970495575864	3.09500598856535	0.7284788907335449	-1.059101922585931	-2.361227759295823	-4.602333571850617	4.084346870156461	0.3839049447969578	1.112853768947335	-1.0253212159697456	1.9923337880947212
            0.575719807554711	3.773104759929866	-1.006054685017923	3.5025963416044634	1.5303017603813263	-3.6319947707636544	0.670629877320501	-3.4542021220155172	-4.688216847934284	-2.471827482747356	2.2803993573424606	0.1657865044423057	1.8907742171493591	1.2379095518707195	-1.6088822030316274	4.141231069376592
            0.5054676060716701	4.1861353229902925	-4.346041597594688	1.9878055251203453	-3.3883018745852467	2.1420172994491518	-1.0278497902963035	4.3152417858749805	3.585613303987951	-2.611628968656252	-4.771739632247179	2.3566661547364243	0.4545343891602205	-3.49427206656163	-1.1525896358399224	0.11495874401381223
            -0.8663056890929499	-2.1689931161624507	-0.2001178332687792	-0.6147858709135767	-3.6320853406411135	2.6997021021392023	-2.6204848835203007	-1.2327327974786317	-3.52950310688646	-2.6661187368831585	-4.183122248664338	-1.8615186642230719	4.643747277915459	-1.0261369248986263	-4.66185204628259	0.3289826666973472
            1.3759070127997153	-0.07186155576947573	-3.8289191905779063	1.9282831049924976	2.825161868190543	-3.4395669461284104	-4.342413386805641	-3.854523657149893	-0.7657720316337435	4.289716292208742	4.460671054948117	1.5521559279084207	3.9712457540247614	-1.0773224941116943	-4.774740532363807	1.0440405151911303
            -0.5960481867704626	1.6987297564313897	-1.8485538188317185	-1.4526903184649886	4.61105388373889	1.733906756385143	1.920350932313114	2.0304618511262253	-2.2099064350023423	2.6862963036025778	2.4135833315696518	-1.154342026852745	3.6560370438306364	-1.788979396950302	-0.6895627676920413	0.15596316140701116
            -2.0312332996441276	1.2484565513041967	2.609968220469784	1.831841413586871	-0.8024449784039844	-3.146802896544816	2.165769695425354	2.2127731268760042	4.991813045540755	-3.0273052910637457	-3.0828565259073812	-1.8910109929401353	-1.3721403586278558	-1.504012289565969	-1.1555333832447212	-0.37055206712286237])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_rand_9_17(zer0 :: Bool = false, T = Float64)
    T = Float64
    Vt = T.([1.3204014557859756	-3.7079497634869476	2.9902278066242927	1.714456463816838	-2.490214841713869	2.727812691246967	2.851214622825766	1.6462957179119397	-1.1827640155868957	1.4938940430712722	3.752874106855794	4.2413060428569915	3.482182222156206	2.69993157480531	1.2263380030987014	3.7424964634750246	-1.4214292519177396
            -1.776505747785283	-3.8818079033648556	4.440564617194372	-0.02736593995805836	-3.0304178575327967	3.9354148812532177	-4.91530897982909	-4.648262538322024	4.219469889436126	-3.2308711593773767	-0.9835959100813141	3.8612486620724806	-0.9231928781476595	-3.294490172970894	-3.8050987686530013	-1.859513399446051	-0.40425978362516046
            -0.7773112644263691	4.018328058776747	3.096053486777377	2.3023704303363965	3.012287356550983	-2.1635257644838313	0.39082475157683816	-0.25527065347772493	1.3468826704316594	1.7887533417417323	-0.7927309992363529	-3.5478210939821366	-2.8142681986533704	0.45704496846508125	4.990389533416706	-3.996137307282117	0.8987594534907195
            -4.3463466870397784	-3.923474442232556	1.785825007594396	1.5754759579460187	-2.0371187825843826	4.70725146563997	-4.037098070920701	2.3472422930566084	-3.4555706896761462	3.5613616358686695	0.26164190391196884	-3.477809757270194	4.231630200247505	0.7085692892351958	-4.392472056810712	3.3800359355829968	3.5368715198543987
            -2.630285339379679	0.331858647476847	3.088124435213447	3.256319795311361	-0.632033713606549	-4.272811416165362	-2.6695786205011562	4.234013605873169	0.7807395803205985	-1.7795995381564211	-4.363944322204155	3.1376586465447187	0.8661678406968465	2.8985306486377915	1.530203375178486	4.246249919682579	2.8356265712733686
            4.819065533537139	3.649931916468816	2.410551515480046	1.5496879374131312	2.15336446977254	2.0639349915891803	-3.769407291240187	1.7127818278085116	4.015981507984807	-1.0218480678325081	-4.374231771176472	-4.827362087249719	0.5151339360265594	1.2965382239206924	-3.3180545895446665	-1.1290955225894816	-3.1692403811588665
            -2.59588082128014	1.0445693059838401	-2.9229465435067628	4.992987952328226	-4.77272709710273	-2.702603702594233	-1.685275069393899	2.7802291755051267	4.339573772993257	1.114823355249237	-2.659860651750423	1.068499118481504	-4.818586771607572	3.579441214787776	3.6816009023769114	0.09663996283935883	2.9445244452010435
            -3.9070573986673205	0.5281229545244204	-1.7485653476352125	3.006966473698779	3.836687207827083	-4.803996550943495	1.4038292806969366	-0.27287389578703247	-3.075269119057814	0.16928726947681105	-3.357235933701327	-4.821490679153535	2.9090339661899955	-2.8799342581711294	-0.11638620965194968	1.3366853330050454	-2.5732046418193644
            2.789214489107439	-3.6497882557176142	2.040657189623386	-1.833996417545869	1.411094185839753	-0.4126341102401132	-3.028554282767695	2.8350381706762406	-2.3222864333473527	2.6051945540030275	1.4360929840460468	4.551629723121699	-2.12915027121828	-1.104291632672365	1.2679449883640581	3.4242820902644686	-3.5287764139458866
            -4.480584578371317	-4.766092401545992	0.48463543751909643	1.413045406218888	-1.1228447571337008	2.904014617492562	-4.103951828418936	1.6944535607295608	-0.34111007907292934	-1.6523050581371135	-3.507973359050851	1.6346406266837166	2.5190882100815726	3.358964023866359	3.837080565170048	-4.598348460275032	2.51868040398058])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

## srand instances 
function gen_srand_8_20_2(zer0 :: Bool = false, T = Float64)

    Vt = T.([1	0	0	0	0	0	0	0	6	-3	0	0	0	0	0	0	5	0	0	0
            0	1	0	0	0	0	0	0	0	0	4	1	0	0	0	-9	0	0	-3	0
            0	0	1	0	0	0	0	0	0	0	0	0	0	-9	0	0	0	0	0	0
            0	0	0	1	0	0	0	0	0	0	0	0	0	0	7	0	0	0	0	0
            0	0	0	0	1	0	0	0	0	0	0	0	0	-1	0	-9	0	0	0	-2
            0	0	0	0	0	1	0	0	0	0	-4	0	-8	0	0	0	0	0	0	-2
            0	0	0	0	0	0	1	0	0	0	0	0	9	0	0	0	0	-1	1	0
            0	0	0	0	0	0	0	1	3	-1	0	-7	0	0	4	0	-6	3	0	0
            0	0	0	0	0	0	0	0	0	0	0	0	-8	0	0	0	0	6	-3	4])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_srand_8_20_4(zer0 :: Bool = false, T = Float64)

    Vt = T.([1	0	0	0	0	0	0	0	5	-9	6	1	0	-7	0	0	0	-1	0	9
            0	1	0	0	0	0	0	0	0	0	-1	0	0	0	6	0	-5	0	0	0
            0	0	1	0	0	0	0	0	0	0	3	-5	0	7	10	0	-6	0	1	0
            0	0	0	1	0	0	0	0	-1	-5	5	10	7	10	0	-3	0	8	0	-1
            0	0	0	0	1	0	0	0	0	0	0	2	6	0	5	0	-6	0	-6	6
            0	0	0	0	0	1	0	0	8	6	0	0	-6	0	0	-3	0	9	-7	0
            0	0	0	0	0	0	1	0	0	0	0	0	2	-9	-2	4	0	0	-6	5
            0	0	0	0	0	0	0	1	5	8	0	0	0	0	0	-3	4	2	0	0
            0	0	0	0	0	0	0	0	0	-7	7	0	0	0	0	0	5	-8	-8	0])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_srand_8_20_6(zer0 :: Bool = false, T = Float64)

    Vt = T.([1	0	0	0	0	0	0	0	3	0	-1	6	2	5	0	-6	0	5	-10	-2
            0	1	0	0	0	0	0	0	-3	8	0	-1	1	4	-7	-4	-3	2	-7	2
            0	0	1	0	0	0	0	0	-8	7	9	0	-3	2	-1	-8	4	0	2	8
            0	0	0	1	0	0	0	0	0	1	-1	-2	0	0	6	0	-8	0	0	0
            0	0	0	0	1	0	0	0	4	8	4	5	-6	9	6	9	8	-8	0	4
            0	0	0	0	0	1	0	0	0	0	-1	7	0	10	0	1	8	-8	6	-7
            0	0	0	0	0	0	1	0	8	8	-10	-5	4	0	-3	9	4	7	2	-1
            0	0	0	0	0	0	0	1	-8	-3	0	0	3	-4	-2	0	0	-10	5	0
            0	0	0	0	0	0	0	0	0	0	0	10	0	0	0	1	0	0	-4	0])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

## ratio instances 
function gen_ratio_3_20_07(zer0 :: Bool = false, T = Float64)

    Vt = T.([-14	8	49	42	10	-24	-113	99	-6	-35	280	-19	-380	-368	1075	717	-136	205	4056	8738
            33	-44	10	-99	43	13	-85	118	-18	208	619	20	383	-1013	2291	2240	-4671	-12885	8135	16665
            44	37	-25	-132	-19	-17	-94	138	0	239	675	-24	652	-993	2371	2224	-5290	-14733	7962	15852
            26	1	-15	-78	36	3	-34	60	43	141	273	50	291	-399	965	1098	-2393	-6675	3305	6684])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_ratio_3_20_09(zer0 :: Bool = false, T = Float64)

    Vt = T.([25	35	-39	103	38	167	284	-230	3	-40	973	-98	19	1031	3478	-7195	20257	64306	617	25773
            -15	14	-42	69	143	96	222	-224	1	-35	1124	-249	24	978	3813	-7573	21341	67228	198	26381
            -42	-18	46	-134	16	-222	-360	248	-22	-49	-1082	-223	34	-664	-3900	9135	-26324	-82380	-1129	-32280
            -14	34	-18	22	112	26	80	-124	-42	44	518	40	49	50	1840	-4039	11421	35693	320	14631])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_ratio_4_20_07(zer0 :: Bool = false, T = Float64)

    Vt = T.([-48	-33	40	-21	39	104	10	50	-80	-21	-5	185	632	12	-251	-498	-322	25	1419	210
            -14	37	18	21	19	-46	-14	-38	22	37	-10	-114	-439	37	-121	158	-117	-21	-574	349
            -33	9	38	-32	-40	212	-197	28	54	664	-25	128	-101	4	-1282	-2796	-1556	10	-405	1352
            -43	6	41	-15	7	120	-89	48	-3	303	1	170	284	-46	-684	-1498	-886	-30	386	726
            47	4	-14	8	-35	-17	-38	-18	72	102	3	-96	-360	26	129	-107	157	-16	-1181	-193])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_ratio_4_20_09(zer0 :: Bool = false, T = Float64)

    Vt = T.([40	4	15	-16	-1	-6	53	67	157	466	1497	-1600	1499	10	-3361	-4993	-7149	17288	20134	-643
            -42	-44	-23	-2	-25	-6	-107	-155	-371	-1000	-3245	3262	-3007	-23	7389	10725	15870	-37756	-43760	433
            -35	30	18	48	66	102	-10	74	102	172	664	-504	192	-44	-1646	-1974	-3434	7596	8648	294
            -21	-15	19	-29	-10	-5	-105	-96	-335	-813	-2664	2628	-2270	10	5971	8894	12870	-31185	-36109	354
            -6	3	8	19	27	51	2	37	60	121	445	-416	225	-10	-1040	-1393	-2191	5079	5857	-47])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_ratio_5_20_07(zer0 :: Bool = false, T = Float64)

    Vt = T.([7	-42	-49	16	29	-9	-55	-12	102	0	-200	-36	113	-414	-27	-48	253	-430	1297	15
            -21	24	18	36	-17	-14	-87	77	-52	-48	-8	-56	70	2	50	46	4	371	-1099	-33
            6	42	28	-13	-50	-48	33	-101	162	-34	-174	-192	-615	-867	44	14	171	-3528	10191	-45
            -44	0	37	20	-22	21	-16	95	-198	19	310	84	234	754	-35	-27	-29	2272	-6381	-34
            -3	15	-44	-6	-12	-3	21	-71	112	2	-196	-12	-100	-233	35	1	7	-775	2065	-7
            29	-49	33	19	44	10	-86	139	-144	23	256	40	415	310	37	-13	-296	1873	-5767	41])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_ratio_5_20_09(zer0 :: Bool = false, T = Float64)

    Vt = T.([5	-12	47	13	-17	82	-176	-493	39	-273	-541	1166	1602	-4114	-9924	-7716	-4818	713	32	-2895
            46	30	33	-32	12	153	-219	-537	22	-511	-1269	1867	2365	-7392	-15250	-8256	-2934	2781	-23	10499
            0	27	7	-1	-25	110	-124	-269	50	-407	-1015	1227	1679	-5811	-11295	-5476	-1246	2581	2	10054
            -43	-42	-3	-17	-37	-272	278	565	31	827	1999	-2622	-3508	11732	23222	12054	3086	-5015	-37	-18235
            42	20	-26	26	-13	251	-199	-320	68	-841	-2109	2331	3150	-11520	-21570	-9287	-542	5937	32	24188
            37	-23	-44	23	-32	99	-11	110	101	-375	-1006	746	998	-4654	-7536	-1266	2309	3459	-40	16143])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_ratio_6_20_07(zer0 :: Bool = false, T = Float64)

    Vt = T.([15	-44	-37	20	19	-46	71	7	-192	44	242	-140	-749	290	-406	-624	-28	1049	-1461	-19
            45	6	-11	19	-22	-16	55	-22	3	29	-164	-135	-440	61	195	37	16	573	-615	-27
            10	33	-43	-30	45	21	-107	47	102	8	-278	146	845	-430	626	661	47	-1543	1949	35
            9	13	27	-35	-20	-35	128	34	96	23	-314	-191	-506	74	-2	159	19	1107	-833	26
            -26	-43	1	-40	-30	-7	207	-36	21	3	-39	-142	-746	517	-197	-1001	-31	739	-827	-26
            19	-1	5	31	-41	18	23	40	114	0	-235	-136	-213	-186	56	540	43	988	-788	46
            40	0	-41	3	14	15	-9	1	37	-14	-109	-6	122	-137	266	197	-40	-283	155	-36])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_ratio_6_20_09(zer0 :: Bool = false, T = Float64)

    Vt = T.([14	37	-10	31	-13	20	-26	68	-224	596	296	-927	41	-28	-1188	-848	3824	10329	2652	-11376
            42	20	3	-30	5	27	-94	-10	-209	647	391	-1158	-45	38	-1794	-807	5583	13477	3507	-16841
            -2	-42	45	-19	-39	-42	-171	-61	-62	353	314	-483	-1	20	-1338	-415	4106	9474	1399	-12228
            -6	-10	-1	48	-17	-7	20	38	19	-43	-57	228	41	1	308	128	-1015	-2284	-792	3161
            4	42	-38	-30	-15	-32	-78	12	-366	1016	598	-1761	15	3	-2805	-1460	8917	22136	5310	-26926
            -49	20	-2	-7	-31	-9	86	13	113	-470	-281	817	-4	-15	1371	642	-4137	-10372	-2455	12355
            46	34	-22	-34	-36	50	10	0	-114	294	138	-456	9	32	-532	-302	1699	4294	1350	-5070])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_ratio_7_20_07(zer0 :: Bool = false, T = Float64)

    Vt = T.([24	44	48	-46	-28	-26	40	338	-452	29	1306	36	-3987	1201	22	6919	-13505	4381	26478	-9819
            16	21	15	32	10	0	-18	-3	-88	36	302	-11	-989	273	18	1853	-3415	968	6791	-2169
            -42	2	-33	-36	5	-45	-15	66	106	-12	-319	42	957	-343	6	-1847	3505	-1337	-6861	2800
            -49	18	22	37	5	-5	21	-42	20	-45	-27	-30	191	209	4	-419	747	33	-1471	-184
            12	46	-20	-15	6	42	-28	-144	-63	-6	240	-29	-609	166	-12	1487	-3165	1774	6218	-3207
            -41	18	-15	17	15	-48	-23	24	72	-15	-166	27	439	-54	17	-888	1752	-708	-3322	1336
            38	44	19	48	-17	20	-38	-61	-231	-45	766	-29	-2300	996	-42	4331	-8684	3807	17099	-7870
            21	1	-1	-38	33	-46	-9	232	-60	21	144	23	-467	50	-12	508	-817	-328	1466	375])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_ratio_7_20_09(zer0 :: Bool = false, T = Float64)

    Vt = T.([-9	-46	28	43	47	-17	-44	7	-124	-30	-191	-349	-172	-9	-474	563	36	33	384	335
            22	15	-5	33	15	39	35	-3	123	-26	70	385	42	-312	-196	801	21	-1139	-1063	-42
            44	5	-19	27	-14	-7	13	-40	244	-3	80	380	53	-283	-97	869	32	-1273	-1083	-19
            34	19	-37	-50	19	-8	26	35	-236	24	227	-331	-5	722	1058	-2899	21	2334	1614	-498
            -26	0	-16	13	21	-18	24	-50	147	-33	97	156	133	-76	72	466	-23	-176	-321	-50
            -23	14	-49	43	-50	-16	-33	19	214	42	6	387	153	-438	-367	1354	40	-1420	-1056	307
            -39	-35	9	3	-37	-25	13	35	-127	10	-58	-173	-15	104	98	-609	-3	611	486	-46
            1	2	-48	16	-49	16	16	22	86	-32	-72	302	279	-654	-667	1676	-38	-741	-1456	616])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end


### from there, the instances are centered (all hyperplanes have a common intersection)
## perm instances
function gen_perm_4(zer0 :: Bool = false, T = Float64)

    Vt = T.([1	0	0	0	1	1	1	0	0	0
            0	1	0	0	-1	0	0	1	1	0
            0	0	1	0	0	-1	0	-1	0	1
            0	0	0	1	0	0	-1	0	-1	-1
            1	1	1	1	0	0	0	0	0	0])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, true
end

function gen_perm_5(zer0 :: Bool = false, T = Float64)

    Vt = T.([1	0	0	0	0	1	1	1	1	0	0	0	0	0	0
            0	1	0	0	0	-1	0	0	0	1	1	1	0	0	0
            0	0	1	0	0	0	-1	0	0	-1	0	0	1	1	0
            0	0	0	1	0	0	0	-1	0	0	-1	0	-1	0	1
            0	0	0	0	1	0	0	0	-1	0	0	-1	0	-1	-1
            1	1	1	1	1	0	0	0	0	0	0	0	0	0	0])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, true
end

function gen_perm_6(zer0 :: Bool = false, T = Float64)

    Vt = T.([1	0	0	0	0	0	1	1	1	1	1	0	0	0	0	0	0	0	0	0	0
            0	1	0	0	0	0	-1	0	0	0	0	1	1	1	1	0	0	0	0	0	0
            0	0	1	0	0	0	0	-1	0	0	0	-1	0	0	0	1	1	1	0	0	0
            0	0	0	1	0	0	0	0	-1	0	0	0	-1	0	0	-1	0	0	1	1	0
            0	0	0	0	1	0	0	0	0	-1	0	0	0	-1	0	0	-1	0	-1	0	1
            0	0	0	0	0	1	0	0	0	0	-1	0	0	0	-1	0	0	-1	0	-1	-1
            1	1	1	1	1	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, true
end

function gen_perm_7(zer0 :: Bool = false, T = Float64)

    Vt = T.([1	0	0	0	0	0	0	1	1	1	1	1	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            0	1	0	0	0	0	0	-1	0	0	0	0	0	1	1	1	1	1	0	0	0	0	0	0	0	0	0	0
            0	0	1	0	0	0	0	0	-1	0	0	0	0	-1	0	0	0	0	1	1	1	1	0	0	0	0	0	0
            0	0	0	1	0	0	0	0	0	-1	0	0	0	0	-1	0	0	0	-1	0	0	0	1	1	1	0	0	0
            0	0	0	0	1	0	0	0	0	0	-1	0	0	0	0	-1	0	0	0	-1	0	0	-1	0	0	1	1	0
            0	0	0	0	0	1	0	0	0	0	0	-1	0	0	0	0	-1	0	0	0	-1	0	0	-1	0	-1	0	1
            0	0	0	0	0	0	1	0	0	0	0	0	-1	0	0	0	0	-1	0	0	0	-1	0	0	-1	0	-1	-1
            1	1	1	1	1	1	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, true
end

function gen_perm_8(zer0 :: Bool = false, T = Float64)

    Vt = T.([1	0	0	0	0	0	0	0	1	1	1	1	1	1	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            0	1	0	0	0	0	0	0	-1	0	0	0	0	0	0	1	1	1	1	1	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
            0	0	1	0	0	0	0	0	0	-1	0	0	0	0	0	-1	0	0	0	0	0	1	1	1	1	1	0	0	0	0	0	0	0	0	0	0
            0	0	0	1	0	0	0	0	0	0	-1	0	0	0	0	0	-1	0	0	0	0	-1	0	0	0	0	1	1	1	1	0	0	0	0	0	0
            0	0	0	0	1	0	0	0	0	0	0	-1	0	0	0	0	0	-1	0	0	0	0	-1	0	0	0	-1	0	0	0	1	1	1	0	0	0
            0	0	0	0	0	1	0	0	0	0	0	0	-1	0	0	0	0	0	-1	0	0	0	0	-1	0	0	0	-1	0	0	-1	0	0	1	1	0
            0	0	0	0	0	0	1	0	0	0	0	0	0	-1	0	0	0	0	0	-1	0	0	0	0	-1	0	0	0	-1	0	0	-1	0	-1	0	1
            0	0	0	0	0	0	0	1	0	0	0	0	0	0	-1	0	0	0	0	0	-1	0	0	0	0	-1	0	0	0	-1	0	0	-1	0	-1	-1
            1	1	1	1	1	1	1	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0])
    if zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, true
end

### from there, the instances are central (all hyperplanes contain the origin as common intersection)
## threshold instances 
function gen_threshold_4(zer0 :: Bool = true, T = Float64)

    Vt = T.([1	1	1	1	1	1	1	1
            0	1	0	1	0	1	0	1
            0	0	1	1	0	0	1	1
            0	0	0	0	1	1	1	1])
    if ~zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_threshold_5(zer0 :: Bool = true, T = Float64)

    Vt = T.([1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1
            0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1
            0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1
            0	0	0	0	1	1	1	1	0	0	0	0	1	1	1	1
            0	0	0	0	0	0	0	0	1	1	1	1	1	1	1	1])
    if ~zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_threshold_6(zer0 :: Bool = true, T = Float64)

    Vt = T.([1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1
            0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1
            0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1
            0	0	0	0	1	1	1	1	0	0	0	0	1	1	1	1	0	0	0	0	1	1	1	1	0	0	0	0	1	1	1	1
            0	0	0	0	0	0	0	0	1	1	1	1	1	1	1	1	0	0	0	0	0	0	0	0	1	1	1	1	1	1	1	1
            0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1])
    if ~zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

## resonance instances
function gen_resonance_4(zer0 :: Bool = true, T = Float64)

    Vt = T.([1	0	1	0	1	0	1	0	1	0	1	0	1	0	1
            0	1	1	0	0	1	1	0	0	1	1	0	0	1	1
            0	0	0	1	1	1	1	0	0	0	0	1	1	1	1
            0	0	0	0	0	0	0	1	1	1	1	1	1	1	1])
    if ~zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_resonance_5(zer0 :: Bool = true, T = Float64)

    Vt = T.([1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1
            0	1	1	0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1
            0	0	0	1	1	1	1	0	0	0	0	1	1	1	1	0	0	0	0	1	1	1	1	0	0	0	0	1	1	1	1
            0	0	0	0	0	0	0	1	1	1	1	1	1	1	1	0	0	0	0	0	0	0	0	1	1	1	1	1	1	1	1
            0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1])
    if ~zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_resonance_6(zer0 :: Bool = true, T = Float64)

    Vt = T.([1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1	0	1
            0	1	1	0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1	0	0	1	1
            0	0	0	1	1	1	1	0	0	0	0	1	1	1	1	0	0	0	0	1	1	1	1	0	0	0	0	1	1	1	1	0	0	0	0	1	1	1	1	0	0	0	0	1	1	1	1	0	0	0	0	1	1	1	1	0	0	0	0	1	1	1	1
            0	0	0	0	0	0	0	1	1	1	1	1	1	1	1	0	0	0	0	0	0	0	0	1	1	1	1	1	1	1	1	0	0	0	0	0	0	0	0	1	1	1	1	1	1	1	1	0	0	0	0	0	0	0	0	1	1	1	1	1	1	1	1
            0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1
            0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1])
    if ~zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

## crosspolytope instances 
function gen_crosspoly_6(zer0 :: Bool = true, T = Float64)

    Vt = T.([1	1	1	1	1	1	1	1	1	1
            1	0	0	0	0	-1	0	0	0	0
            0	1	0	0	0	0	-1	0	0	0
            0	0	1	0	0	0	0	-1	0	0
            0	0	0	1	0	0	0	0	-1	0
            0	0	0	0	1	0	0	0	0	-1])
    if ~zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_crosspoly_7(zer0 :: Bool = true, T = Float64)

    Vt = T.([1	1	1	1	1	1	1	1	1	1	1	1
            1	0	0	0	0	0	-1	0	0	0	0	0
            0	1	0	0	0	0	0	-1	0	0	0	0
            0	0	1	0	0	0	0	0	-1	0	0	0
            0	0	0	1	0	0	0	0	0	-1	0	0
            0	0	0	0	1	0	0	0	0	0	-1	0
            0	0	0	0	0	1	0	0	0	0	0	-1])
    if ~zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_crosspoly_8(zer0 :: Bool = true, T = Float64)

    Vt = T.([1	1	1	1	1	1	1	1	1	1	1	1	1	1
            1	0	0	0	0	0	0	-1	0	0	0	0	0	0
            0	1	0	0	0	0	0	0	-1	0	0	0	0	0
            0	0	1	0	0	0	0	0	0	-1	0	0	0	0
            0	0	0	1	0	0	0	0	0	0	-1	0	0	0
            0	0	0	0	1	0	0	0	0	0	0	-1	0	0
            0	0	0	0	0	1	0	0	0	0	0	0	-1	0
            0	0	0	0	0	0	1	0	0	0	0	0	0	-1])
    if ~zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_crosspoly_9(zer0 :: Bool = true, T = Float64)

    Vt = T.([1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1
            1	0	0	0	0	0	0	0	-1	0	0	0	0	0	0	0
            0	1	0	0	0	0	0	0	0	-1	0	0	0	0	0	0
            0	0	1	0	0	0	0	0	0	0	-1	0	0	0	0	0
            0	0	0	1	0	0	0	0	0	0	0	-1	0	0	0	0
            0	0	0	0	1	0	0	0	0	0	0	0	-1	0	0	0
            0	0	0	0	0	1	0	0	0	0	0	0	0	-1	0	0
            0	0	0	0	0	0	1	0	0	0	0	0	0	0	-1	0
            0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	-1])
    if ~zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_crosspoly_10(zer0 :: Bool = true, T = Float64)

    Vt = T.([1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1
            1	0	0	0	0	0	0	0	0	-1	0	0	0	0	0	0	0	0
            0	1	0	0	0	0	0	0	0	0	-1	0	0	0	0	0	0	0
            0	0	1	0	0	0	0	0	0	0	0	-1	0	0	0	0	0	0
            0	0	0	1	0	0	0	0	0	0	0	0	-1	0	0	0	0	0
            0	0	0	0	1	0	0	0	0	0	0	0	0	-1	0	0	0	0
            0	0	0	0	0	1	0	0	0	0	0	0	0	0	-1	0	0	0
            0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	-1	0	0
            0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	-1	0
            0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	-1])
    if ~zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_crosspoly_11(zer0 :: Bool = true, T = Float64)

    Vt = T.([1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1
            1	0	0	0	0	0	0	0	0	0	-1	0	0	0	0	0	0	0	0	0
            0	1	0	0	0	0	0	0	0	0	0	-1	0	0	0	0	0	0	0	0
            0	0	1	0	0	0	0	0	0	0	0	0	-1	0	0	0	0	0	0	0
            0	0	0	1	0	0	0	0	0	0	0	0	0	-1	0	0	0	0	0	0
            0	0	0	0	1	0	0	0	0	0	0	0	0	0	-1	0	0	0	0	0
            0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	-1	0	0	0	0
            0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	-1	0	0	0
            0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	-1	0	0
            0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	-1	0
            0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	-1])
    if ~zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_crosspoly_12(zer0 :: Bool = true, T = Float64)

    Vt = T.([1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1
            1	0	0	0	0	0	0	0	0	0	0	-1	0	0	0	0	0	0	0	0	0	0
            0	1	0	0	0	0	0	0	0	0	0	0	-1	0	0	0	0	0	0	0	0	0
            0	0	1	0	0	0	0	0	0	0	0	0	0	-1	0	0	0	0	0	0	0	0
            0	0	0	1	0	0	0	0	0	0	0	0	0	0	-1	0	0	0	0	0	0	0
            0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	-1	0	0	0	0	0	0
            0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	-1	0	0	0	0	0
            0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	-1	0	0	0	0
            0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	-1	0	0	0
            0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	-1	0	0
            0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	-1	0
            0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	-1])
    if ~zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_crosspoly_13(zer0 :: Bool = true, T = Float64)

    Vt = T.([1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1
            1	0	0	0	0	0	0	0	0	0	0	0	-1	0	0	0	0	0	0	0	0	0	0	0
            0	1	0	0	0	0	0	0	0	0	0	0	0	-1	0	0	0	0	0	0	0	0	0	0
            0	0	1	0	0	0	0	0	0	0	0	0	0	0	-1	0	0	0	0	0	0	0	0	0
            0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	-1	0	0	0	0	0	0	0	0
            0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	-1	0	0	0	0	0	0	0
            0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	-1	0	0	0	0	0	0
            0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	-1	0	0	0	0	0
            0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	-1	0	0	0	0
            0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	-1	0	0	0
            0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	-1	0	0
            0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	-1	0
            0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	-1])
    if ~zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

## demicube instances 
function gen_demicube_5(zer0 :: Bool = true, T = Float64)

    Vt = T.([1	1	1	1	1	1	1	1
            1	0	0	0	1	1	1	0
            0	1	0	0	1	1	0	1
            0	0	1	0	1	0	1	1
            0	0	0	1	0	1	1	1])
    if ~zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_demicube_6(zer0 :: Bool = true, T = Float64)

    Vt = T.([1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1
            1	0	0	0	0	1	1	1	1	1	1	0	0	0	0	1
            0	1	0	0	0	1	1	1	0	0	0	1	1	1	0	1
            0	0	1	0	0	1	0	0	1	1	0	1	1	0	1	1
            0	0	0	1	0	0	1	0	1	0	1	1	0	1	1	1
            0	0	0	0	1	0	0	1	0	1	1	0	1	1	1	1])
    if ~zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end

function gen_demicube_7(zer0 :: Bool = true, T = Float64)

    Vt = T.([1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1
            1	0	0	0	0	0	1	1	1	1	1	1	1	1	1	1	0	0	0	0	0	0	0	0	0	0	1	1	1	1	1	0
            0	1	0	0	0	0	1	1	1	1	0	0	0	0	0	0	1	1	1	1	1	1	0	0	0	0	1	1	1	1	0	1
            0	0	1	0	0	0	1	0	0	0	1	1	1	0	0	0	1	1	1	0	0	0	1	1	1	0	1	1	1	0	1	1
            0	0	0	1	0	0	0	1	0	0	1	0	0	1	1	0	1	0	0	1	1	0	1	1	0	1	1	1	0	1	1	1
            0	0	0	0	1	0	0	0	1	0	0	1	0	1	0	1	0	1	0	1	0	1	1	0	1	1	1	0	1	1	1	1
            0	0	0	0	0	1	0	0	0	1	0	0	1	0	1	1	0	0	1	0	1	1	0	1	1	1	0	1	1	1	1	1])
    if ~zer0
        n, p = size(Vt)
        Vt = [Vt ; zeros(T, 1, p)]
    end
    return Vt, zer0
end


### instances lists
# defines the groups of instances per types
list_rand = [gen_rand_5_10, gen_rand_4_11, gen_rand_6_12, gen_rand_5_13, gen_rand_7_14, gen_rand_7_15, gen_rand_8_16, gen_rand_9_17] # gen_rand_2_8, gen_rand_4_8, gen_rand_4_9, 
list_2d = [gen_2d_5, gen_2d_6, gen_2d_7, gen_2d_8] # gen_2d_4, 
list_srand = [gen_srand_8_20_2, gen_srand_8_20_4, gen_srand_8_20_6]
list_perm = [gen_perm_5, gen_perm_6, gen_perm_7, gen_perm_8]
list_ratio = [gen_ratio_5_20_07, gen_ratio_5_20_09, gen_ratio_6_20_07, gen_ratio_6_20_09, gen_ratio_7_20_07, gen_ratio_7_20_09] # gen_ratio_3_20_07, gen_ratio_3_20_09, gen_ratio_4_20_07, gen_ratio_4_20_09, 
list_threshold = [gen_threshold_4, gen_threshold_5, gen_threshold_6]
list_resonance = [gen_resonance_4, gen_resonance_5, gen_resonance_6]
list_demicube = [gen_demicube_5, gen_demicube_6, gen_demicube_7]
list_crosspoly = [gen_crosspoly_6, gen_crosspoly_7, gen_crosspoly_8, gen_crosspoly_9, gen_crosspoly_10, gen_crosspoly_11, gen_crosspoly_12, gen_crosspoly_13]

# list with all the instances
list_total = [list_rand ; list_2d ; list_srand ; list_perm ; list_ratio ; list_threshold ; list_resonance ; list_demicube ; list_crosspoly]
# list with less of the instances
list_short = [gen_rand_5_10, gen_rand_6_12, gen_2d_5, gen_2d_6, gen_srand_8_20_2, gen_perm_5, gen_perm_6, gen_ratio_5_20_07, gen_ratio_5_20_09, gen_threshold_4, gen_resonance_4, gen_demicube_5, gen_crosspoly_6, gen_crosspoly_7]
# loist with just a few instances 
list_small = [gen_rand_5_10, gen_perm_5, gen_crosspoly_6]